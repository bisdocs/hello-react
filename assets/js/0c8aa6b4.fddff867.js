"use strict";(self.webpackChunklearnreact=self.webpackChunklearnreact||[]).push([[38],{5626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={sidebar_position:1},i="States in React",o={id:"react-basics/states",title:"States in React",description:"When we change the value of a regular variable, the changes don't reflect on the screen. The reason is that the component needs to be re-rendered to display the updated value. React state solves this problem by triggering re-renders whenever the state variable changes.",source:"@site/docs/react-basics/states.md",sourceDirName:"react-basics",slug:"/react-basics/states",permalink:"/hello-react/react-basics/states",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Handling Forms",permalink:"/hello-react/react-basics/handle-forms"},next:{title:"React - Hooks",permalink:"/hello-react/category/react---hooks"}},l={},c=[{value:"The problem",id:"the-problem",level:2},{value:"The Solution",id:"the-solution",level:2},{value:"State Variable",id:"state-variable",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"states-in-react",children:"States in React"}),"\n",(0,a.jsx)(t.p,{children:"When we change the value of a regular variable, the changes don't reflect on the screen. The reason is that the component needs to be re-rendered to display the updated value. React state solves this problem by triggering re-renders whenever the state variable changes."}),"\n",(0,a.jsx)(t.h2,{id:"the-problem",children:"The problem"}),"\n",(0,a.jsx)(t.p,{children:"In the below example when we click on the button we will observe name is changing but it's not updated on the screen."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:'title="StateProblem.js"',children:'function StateProblem() {\n  let name = "Guest";\n\n  const handleClick = () => {\n    name = "Alia";\n    console.log(name);\n  };\n  return (\n    <>\n      <h2>{name}</h2>\n      <button onClick={handleClick}>Update Name</button>\n    </>\n  );\n}\n\nexport default StateProblem;\n'})}),"\n",(0,a.jsx)(t.h2,{id:"the-solution",children:"The Solution"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:'title="StateSolution.js"',children:'import { useState } from "react";\n\nfunction StateSolution() {\n  const [name, setName] = useState("Guest");\n\n  const handleClick = () => {\n    setName("Alia");\n    console.log(name);\n  };\n  return (\n    <>\n      <h2>{name}</h2>\n      <button onClick={handleClick}>Update Name</button>\n    </>\n  );\n}\n\nexport default StateSolution;\n'})}),"\n",(0,a.jsx)(t.h2,{id:"state-variable",children:"State Variable"}),"\n",(0,a.jsx)(t.p,{children:"The state variable causes re-render of the component when the value changes."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"State variable stores data that can change over time"}),"\n",(0,a.jsx)(t.li,{children:"It's local to the component, each component manage it's own state"}),"\n",(0,a.jsxs)(t.li,{children:["Mutable, unlike props we can change the value using ",(0,a.jsx)(t.code,{children:"setState"})," method"]}),"\n",(0,a.jsx)(t.li,{children:"These are initialized"}),"\n",(0,a.jsx)(t.li,{children:"Asynchronous, setState() calls are asynchronous, and React may batch multiple updates for performance reasons."}),"\n",(0,a.jsxs)(t.li,{children:["Always use ",(0,a.jsx)(t.code,{children:"setState"})," method to update the value and don't update directly"]}),"\n",(0,a.jsx)(t.li,{children:"React state can hold any type of data, including arrays, objects, booleans, strings, numbers"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:'title="StateExample.js"',children:'import { useState } from "react";\n\nfunction StateExample() {\n  let fruitsdata = [\n    { name: "Apple", symbol: "\ud83c\udf4f" },\n    { name: "Mango", symbol: "\ud83e\udd6d" },\n    { name: "Banana", symbol: "\ud83c\udf4c" },\n  ];\n\n  const [fruits, setFruits] = useState(fruitsdata);\n\n  const filterFruits = () => {\n    const filteredFruits = fruits.filter((fruit) => fruit.name.startsWith("A"));\n    setFruits(filteredFruits);\n  };\n\n  return (\n    <div>\n      {fruits.map((fruit) => (\n        <li key={fruit.name}>\n          {fruit.name} {fruit.symbol}\n        </li>\n      ))}\n      <button onClick={filterFruits}>Filter</button>\n    </div>\n  );\n}\n\nexport default StateExample;\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Refer for more info ",(0,a.jsx)(t.a,{href:"https://react.dev/learn/state-a-components-memory",children:"https://react.dev/learn/state-a-components-memory"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);