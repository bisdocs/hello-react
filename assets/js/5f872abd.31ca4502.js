"use strict";(self.webpackChunklearnreact=self.webpackChunklearnreact||[]).push([[352],{674:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(4848),o=t(8453);const s={sidebar_position:3},i="Use Context Hook",l={id:"react-hooks/use-context",title:"Use Context Hook",description:"useContext hook allows functional components to consume context values globally, without prop drilling.",source:"@site/docs/react-hooks/use-context.md",sourceDirName:"react-hooks",slug:"/react-hooks/use-context",permalink:"/hello-react/react-hooks/use-context",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Use State Hook",permalink:"/hello-react/react-hooks/use-state"},next:{title:"Use Effect Hook",permalink:"/hello-react/react-hooks/use-effect"}},a={},c=[{value:"The basic flow",id:"the-basic-flow",level:2},{value:"The problem",id:"the-problem",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Handling Theme",id:"handling-theme",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"use-context-hook",children:"Use Context Hook"}),"\n",(0,r.jsx)(n.p,{children:"useContext hook allows functional components to consume context values globally, without prop drilling."}),"\n",(0,r.jsx)(n.h2,{id:"the-basic-flow",children:"The basic flow"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create Context"})," - First create a context"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"to define the data we want to share across components."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const userContext = createContext();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create Context Provider"})," - Then create a context provider."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Wrap the parent component(s) with a context provider and pass the data using the value prop."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"<UserContext.Provider value={user}>\n    <App>\n</UserContext.Provider>    \n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accessing the context value"})," - Then access the context value in child components"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The data can be accessed/consumed directly without prop drilling."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const user = useContext(UserContext);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update the context value"})," - We can also update the context"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"by modifying state in provider component(s), it triggers re renders in consuming components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const [user, setUser] = useState("Kareena");\nconst updateUser = () => setUser("Priyanka");\n<UserContext.Provider value={{ user, updateUser }}>\n       ...\n</UserContext.Provider>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"the-problem",children:"The problem"}),"\n",(0,r.jsx)(n.p,{children:"It's challenging to manage state without using a state management mechanism."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Lets say we have a nested component tree like ",(0,r.jsx)(n.code,{children:"A -> B -> C -> D"})]}),"\n",(0,r.jsx)(n.li,{children:"Now if we have a state in component A that we need in component D"}),"\n",(0,r.jsx)(n.li,{children:"Then we will have to pass the states through each component to reach D"}),"\n",(0,r.jsx)(n.li,{children:"So the intermediate nodes like B & C don't really need the state but they will have to accept and pass to the next"}),"\n",(0,r.jsxs)(n.li,{children:["This approach is called ",(0,r.jsx)(n.code,{children:"prop drilling"})]}),"\n",(0,r.jsx)(n.li,{children:"Whenever there's a change in state all the components will re render"}),"\n",(0,r.jsx)(n.li,{children:"The component B & C also will re render even though they are not consuming it"}),"\n",(0,r.jsx)(n.li,{children:"This leads to a performance issue"}),"\n",(0,r.jsx)(n.li,{children:"Also in a complex application there will be hundreds of components, prop drilling will increase the complexity"}),"\n",(0,r.jsx)(n.li,{children:"It becomes more complicated When the component D is under unrelated ancestors."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"the-solution",children:"The solution"}),"\n",(0,r.jsxs)(n.p,{children:["Let's see a simple use case to manage state using ",(0,r.jsx)(n.code,{children:"useContext"}),". Consider the scenario is like below"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We have a login page where we are entering the username and submitting it"}),"\n",(0,r.jsx)(n.li,{children:"Once we submit the username it will update the user info in the user context"}),"\n",(0,r.jsx)(n.li,{children:"Then we have another page called Profile where we will fetch the username from the user context and display it"}),"\n",(0,r.jsx)(n.li,{children:"This is a very common use case, to display the username on various pages."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Create the context"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="userContext.js"',children:'import { createContext } from "react";\n\nconst UserContext = createContext();\n\nexport default UserContext;\n'})}),"\n",(0,r.jsx)(n.p,{children:"After creating the context, create a context provider"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Create the context provider"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="UserContextProvider.js"',children:'import { useState } from "react";\nimport UserContext from "./UserContext";\n\nfunction UserContextProvider({ children }) {\n  const [user, setUser] = useState(null);\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nexport default UserContextProvider;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now create the login component to update the user info in the context provider"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Create the login component"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Login.js"',children:'import { useState, useContext } from "react";\nimport UserContext from "./UserContext";\n\nfunction Login() {\n  const [username, setUserName] = useState("Guest");\n  const { setUser } = useContext(UserContext);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setUser(username);\n  };\n\n  return (\n    <form action="">\n      <input\n        type="text"\n        value={username}\n        onChange={(e) => setUserName(e.target.value)}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n    </form>\n  );\n}\n\nexport default Login;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Create the profile component"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Profile.js"',children:'import { useContext } from "react";\nimport UserContext from "./UserContext";\n\nfunction Profile() {\n  const { user } = useContext(UserContext);\n  return (\n    <>\n      <h1>Profile</h1>\n      <p>Hello {user}</p>\n    </>\n  );\n}\n\nexport default Profile;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. Now wrap the components with context provider"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we need to wrap the components with the context provider so the global context can be accessed by all the components.\nUsually the context provider is wrapped around the ",(0,r.jsx)(n.code,{children:"<App />"})," component."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="App.js"',children:'import Login from "./Login";\nimport Profile from "./Profile";\nimport UserContextProvider from "./UserContextProvider";\n\nfunction App() {\n  return (\n    <UserContextProvider>\n      <Login />\n      <Profile />\n    </UserContextProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"handling-theme",children:"Handling Theme"}),"\n",(0,r.jsx)(n.p,{children:"This is a common use case where we manage themes such as dark and light."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Create the context"})}),"\n",(0,r.jsx)(n.p,{children:"Here we will create three things in one file"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The context"}),"\n",(0,r.jsx)(n.li,{children:"Context provider"}),"\n",(0,r.jsx)(n.li,{children:"And a custom hook to access/update the context"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Theme.jsx"',children:'import { createContext, useContext } from "react";\n\n//Create theme context\nexport const ThemeContext = createContext({\n  themeMode: "light",\n  darkTheme: () => {},\n  lightTheme: () => {},\n});\n\n//Create theme provider\nexport const ThemeProvider = ThemeContext.Provider;\n\n//Create a custom hook\nexport default function useTheme() {\n  return useContext(ThemeContext);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Create the theme button"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Theme.jsx"',children:'import { useState } from "react";\nimport useTheme from "./Theme";\n\nfunction ThemeBtn() {\n  const { themeMode, lightTheme, darkTheme } = useTheme();\n\n  const [toggleDark, setToggleDark] = useState(false);\n\n  const onChangebtn = () => {\n    if (toggleDark) {\n      darkTheme();\n    } else {\n      lightTheme();\n    }\n\n    setToggleDark(!toggleDark);\n  };\n\n  return (\n    <>\n      <button className="toggle-btn" onClick={onChangebtn}>\n        {!toggleDark && <h1>&#x1F319;</h1>}\n        {toggleDark && <h1>&#x1F31E;</h1>}\n      </button>\n    </>\n  );\n}\n\nexport default ThemeBtn;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Create the Card component"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Card.jsx"',children:'function Card() {\n  return (\n    <div className="disp-card">\n      <h1>Greetings</h1>\n    </div>\n  );\n}\n\nexport default Card;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Create the Card component"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Card.jsx"',children:'function Card() {\n  return (\n    <div className="disp-card">\n      <h1>Greetings</h1>\n    </div>\n  );\n}\n\nexport default Card;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. App component"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="App.jsx"',children:'import { useEffect, useState } from "react";\nimport { ThemeProvider } from "./Theme";\nimport "./Appx.css";\nimport ThemeBtn from "./ThemeButton";\nimport Card from "./Card";\n\nfunction App() {\n  const [themeMode, setThemeMode] = useState("light");\n\n  const darkTheme = () => {\n    setThemeMode("dark");\n  };\n\n  const lightTheme = () => {\n    setThemeMode("light");\n  };\n\n  useEffect(() => {\n    document.querySelector("html").classList.remove("dark", "light");\n    document.querySelector("html").classList.add(themeMode);\n  }, [themeMode]);\n\n  return (\n    <ThemeProvider value={{ themeMode, darkTheme, lightTheme }}>\n      <ThemeBtn />\n      <Card />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"6. App styles"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="App.css"',children:".toggle-btn {\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n}\n.disp-card {\n  padding: 10px;\n  border: 1px solid silver;\n  width: 300px;\n}\n\n.dark {\n  background-color: rgb(61, 54, 54);\n  color: white;\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);